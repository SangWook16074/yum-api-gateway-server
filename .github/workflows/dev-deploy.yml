name: Deploy develop CICD

on:
  push:
    branches: [ "develop" ]
  merge_group:
    branches: [ "develop" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # gradle 설정
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      # spring boot build
      - name: Build with Gradle Wrapper
        run: ./gradlew clean build -x test

      # 도커 이미지 생성 및 레포 푸시
      - name: Build Dockerfile and Push DockerHub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPONAME }} . 
          docker tag ${{ secrets.DOCKER_REPONAME }}:latest ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPONAME }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPONAME }}:latest

      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@master
        id: deploy
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_EC2_PRIVATE_KEY }}
          script: |
            cd /home/${{ secrets.AWS_USER }}/app
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPONAME }}:latest
            sudo docker stop yum-api-gateway-container
            sudo docker image rm ${{ secrets.DOCKER_USERNAME }}/yum-api-gateway-container
            sudo docker build -p ${{ secrets.API_PORT }}:${{ secrets.API_PORT }} --name=yum-api-gateway-container --network=${{ secrets.NETWORK_NAME }} ${{ secrets.DOCKER_USERNAME }}/yum-api-gateway-container
            sudo docker image prune -a -f